{"ast":null,"code":"var _jsxFileName = \"/home/tomas/Escritorio/projects/weather-App/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css'; //Importar los componentes que voy a renderizar\n\nimport Nav from './components/Nav.jsx';\nimport Cards from './components/Cards.jsx'; //importo el hook { useState } que usaré dentro de la función App\n\nimport { useState } from 'react';\nimport Material from \".components/Material.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  //defino mi state cities y su función seteadore (setState) = setCities\n  //el valor inicial de cities será un array vacío ([]) // acordate, el primer elemento de state, es lo que declaro dentro de usestate\n  const [cities, setCities] = useState([]); //defino mi variable apiKey\n\n  const apiKey = \"193f4639b4fa46fd1aa21d04a5a9a4ce\"; //defino la función onSearch\n\n  function onSearch(city) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`).then(r => r.json()).then(response => {\n      console.log(\"esto es response\", response);\n\n      if (response.main !== undefined) {\n        // si alguna propiedad en base al nombre que llamo, no tiene elementos\n        // entonces seria undefined, funcionaria tmb con response.name\n        const ciudad = {\n          min: Math.round(response.main.temp_min),\n          max: Math.round(response.main.temp_max),\n          img: response.weather[0].icon,\n          id: response.id,\n\n          /* wind: response.wind.speed,\n          temp: response.main.temp, */\n          name: response.name\n          /* weather: response.weather[0].main,    // funciona si lo comento, porque no uso estas propiedades\n          clouds: response.clouds.all,\n          latitud: response.coord.lat,\n          longitud: response.coord.lon */\n\n        };\n        setCities(arregloviejo => [...arregloviejo, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  ; //defino la función onClose\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id != id));\n  }\n\n  return (\n    /*#__PURE__*/\n    //renderizo los componentes\n    _jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Material, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar\",\n        children: /*#__PURE__*/_jsxDEV(Nav, {\n          onSearch: onSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Cards, {\n          cities: cities,\n          onClose: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/tomas/Escritorio/projects/weather-App/src/App.js"],"names":["React","Nav","Cards","useState","Material","App","cities","setCities","apiKey","onSearch","city","fetch","then","r","json","response","console","log","main","undefined","ciudad","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","name","arregloviejo","alert","onClose","oldCities","filter","c"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CACA;;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,KAAP,MAAkB,wBAAlB,C,CACA;;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,yBAArB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B;AACA;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC,CAH4B,CAK5B;;AACA,QAAMK,MAAM,GAAG,kCAAf,CAN4B,CAO5B;;AACC,WAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtBC,IAAAA,KAAK,CAAE,oDAAmDD,IAAK,UAASF,MAAO,eAA1E,CAAL,CACEI,IADF,CACOC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADZ,EAGEF,IAHF,CAGQG,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BF,QAA/B;;AACA,UAAGA,QAAQ,CAACG,IAAT,KAAkBC,SAArB,EAA+B;AAAE;AAC/B;AACA,cAAMC,MAAM,GAAG;AACbC,UAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWR,QAAQ,CAACG,IAAT,CAAcM,QAAzB,CADQ;AAEbC,UAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAWR,QAAQ,CAACG,IAAT,CAAcQ,QAAzB,CAFQ;AAGbC,UAAAA,GAAG,EAAEZ,QAAQ,CAACa,OAAT,CAAiB,CAAjB,EAAoBC,IAHZ;AAIbC,UAAAA,EAAE,EAAEf,QAAQ,CAACe,EAJA;;AAKb;AACZ;AACYC,UAAAA,IAAI,EAAEhB,QAAQ,CAACgB;AACf;AACZ;AACA;AACA;;AAXyB,SAAf;AAaAxB,QAAAA,SAAS,CAACyB,YAAY,IAAI,CAAC,GAAGA,YAAJ,EAAkBZ,MAAlB,CAAjB,CAAT;AACD,OAhBD,MAgBO;AACLa,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACD;AAEF,KAzBF;AA0BG;;AAAA,GAnCsB,CAoC1B;;AACA,WAASC,OAAT,CAAiBJ,EAAjB,EAAqB;AACnBvB,IAAAA,SAAS,CAAC4B,SAAS,IAAIA,SAAS,CAACC,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAACP,EAAF,IAAQA,EAA9B,CAAd,CAAT;AACD;;AAEH;AAAA;AACE;AACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACA,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cADA,eAEE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACE,QAAC,GAAD;AAAK,UAAA,QAAQ,EAAErB;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eAKI;AAAA,+BACA,QAAC,KAAD;AAAO,UAAA,MAAM,EAAEH,MAAf;AAAuB,UAAA,OAAO,EAAE4B;AAAhC;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAYD;;GArDuB7B,G;;KAAAA,G","sourcesContent":["import React from 'react';\nimport './App.css';\n//Importar los componentes que voy a renderizar\nimport Nav from './components/Nav.jsx';\nimport Cards from './components/Cards.jsx';\n//importo el hook { useState } que usaré dentro de la función App\nimport { useState } from 'react'; \nimport Material from \".components/Material.js\"\n\nexport default function App() {\n  //defino mi state cities y su función seteadore (setState) = setCities\n  //el valor inicial de cities será un array vacío ([]) // acordate, el primer elemento de state, es lo que declaro dentro de usestate\n  const [cities, setCities] = useState([]);\n  \n  //defino mi variable apiKey\n  const apiKey = \"193f4639b4fa46fd1aa21d04a5a9a4ce\";\n  //defino la función onSearch\n   function onSearch(city) {\n     fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`)\n      .then(r => r.json())\n      \n      .then((response) => {  \n        console.log(\"esto es response\",response)\n        if(response.main !== undefined){ // si alguna propiedad en base al nombre que llamo, no tiene elementos\n          // entonces seria undefined, funcionaria tmb con response.name\n          const ciudad = {\n            min: Math.round(response.main.temp_min),\n            max: Math.round(response.main.temp_max),\n            img: response.weather[0].icon,\n            id: response.id,\n            /* wind: response.wind.speed,\n            temp: response.main.temp, */\n            name: response.name,\n            /* weather: response.weather[0].main,    // funciona si lo comento, porque no uso estas propiedades\n            clouds: response.clouds.all,\n            latitud: response.coord.lat,\n            longitud: response.coord.lon */\n          };\n          setCities(arregloviejo => [...arregloviejo, ciudad]);\n        } else {\n          alert(\"Ciudad no encontrada\");\n        }\n      \n      }\n      )};\n    //defino la función onClose\n    function onClose(id) {\n      setCities(oldCities => oldCities.filter(c => c.id != id));\n    }\n\n  return (\n    //renderizo los componentes\n    <div className=\"App\">\n    <Material />\n      <div className=\"navbar\">\n        <Nav onSearch={onSearch}/>\n        </div>\n        <div>\n        <Cards cities={cities} onClose={onClose} />\n        </div>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}